import { Router } from "express";
import { baseDeDonnees } from "../db/baseDeDonnees.mjs";

const coordonneesRoutes = Router();

// üìå R√©cup√©rer les coordonn√©es d'un utilisateur connect√©
coordonneesRoutes.get("/:idUtilisateur", async (req, res) => {
    const { idUtilisateur } = req.params;
  
    try {
      // üî• R√©cup√©rer l'email de l'utilisateur + ses coordonn√©es
      const requete = `
        SELECT u.emailUtilisateur, c.telephone1, c.telephone2 
        FROM utilisateurs u
        LEFT JOIN coordonnees c ON u.idUtilisateur = c.idUtilisateur
        WHERE u.idUtilisateur = ?;
      `;
  
      const [resultats] = await baseDeDonnees.query(requete, [idUtilisateur]);
  
      if (resultats.length === 0) {
        return res.status(404).json({ message: "Utilisateur non trouv√©." });
      }
  
      res.status(200).json(resultats[0]); // Retourner l'email et les t√©l√©phones
    } catch (error) {
      console.error("Erreur lors de la r√©cup√©ration des coordonn√©es :", error);
      res.status(500).json({ erreur: "Erreur serveur." });
    }
  });

// üìå Enregistrer ou mettre √† jour les coordonn√©es
coordonneesRoutes.post("/enregistrer/:idUtilisateur", async (req, res) => {
  const { idUtilisateur } = req.params;
  const { telephone1, telephone2 } = req.body;

  try {
    // V√©rifier si l'utilisateur a d√©j√† des coordonn√©es
    const [existant] = await baseDeDonnees.query(
      "SELECT * FROM coordonnees WHERE idUtilisateur = ?",
      [idUtilisateur]
    );

    if (existant.length > 0) {
      // Mise √† jour des coordonn√©es existantes
      await baseDeDonnees.query(`
        UPDATE coordonnees SET telephone1 = ?, telephone2 = ? WHERE idUtilisateur = ?
      `, [telephone1, telephone2, idUtilisateur]);

      return res.status(200).json({ message: "Coordonn√©es mises √† jour avec succ√®s." });
    }

    // Ins√©rer de nouvelles coordonn√©es
    await baseDeDonnees.query(`
      INSERT INTO coordonnees (idUtilisateur, telephone1, telephone2) VALUES (?, ?, ?)
    `, [idUtilisateur, telephone1, telephone2]);

    res.status(201).json({ message: "Coordonn√©es enregistr√©es avec succ√®s." });
  } catch (error) {
    res.status(500).json({ erreur: "Erreur serveur.", details: error.message });
  }
});

// üìå R√©cup√©rer les coordonn√©es d'un utilisateur connect√©
coordonneesRoutes.get("/:idUtilisateur", async (req, res) => {
  const { idUtilisateur } = req.params;

  try {
    // üî• R√©cup√©rer l'email de l'utilisateur + ses coordonn√©es
    const requete = `
      SELECT u.emailUtilisateur, c.telephone1, c.telephone2 
      FROM utilisateurs u
      LEFT JOIN coordonnees c ON u.idUtilisateur = c.idUtilisateur
      WHERE u.idUtilisateur = ?;
    `;

    const [resultats] = await baseDeDonnees.query(requete, [idUtilisateur]);

    if (resultats.length === 0) {
      return res.status(404).json({ message: "Utilisateur non trouv√©." });
    }

    res.status(200).json(resultats[0]); // Retourner l'email et les t√©l√©phones
  } catch (error) {
    console.error("Erreur lors de la r√©cup√©ration des coordonn√©es :", error);
    res.status(500).json({ erreur: "Erreur serveur." });
  }
});

export default coordonneesRoutes;
